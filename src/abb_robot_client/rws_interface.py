from __future__ import annotations

from typing import Any, Dict, List, Protocol, runtime_checkable
from .rws import JointTarget, RobTarget


@runtime_checkable
class RAPIDExecutionStateLike(Protocol):
    ctrlexecstate: Any
    cycle: Any


@runtime_checkable
class TaskStateLike(Protocol):
    name: str
    taskstate: str
    excstate: str
    active: bool
    motiontask: bool


@runtime_checkable
class EventLogEntryLike(Protocol):
    seqnum: int
    msgtype: int
    code: int
    title: str
    desc: str


@runtime_checkable
class RWSLike(Protocol):
    """Minimal shared interface across RWS, RWS2, and mock implementations."""

    # Execution / state
    def start(self, cycle: str = "asis", tasks: List[str] | None = None) -> None: ...
    def stop(self) -> None: ...
    def resetpp(self) -> None: ...
    def get_execution_state(self) -> RAPIDExecutionStateLike: ...
    def get_controller_state(self) -> str: ...
    def set_controller_state(self, ctrl_state: str) -> None: ...
    def set_motors_on(self) -> None: ...
    def set_motors_off(self) -> None: ...
    def get_operation_mode(self) -> str: ...
    def get_speedratio(self) -> int: ...
    def set_speedratio(self, speedratio: int) -> None: ...
    def is_mastered(self) -> bool: ...

    # Tasks
    def get_tasks(self) -> Dict[str, TaskStateLike]: ...
    def activate_task(self, task: str) -> None: ...
    def deactivate_task(self, task: str) -> None: ...

    # IO
    def get_digital_io(self, signal: str, network: str = "", unit: str = "") -> int: ...
    def set_digital_io(self, signal: str, value: bool | int, network: str = "", unit: str = "") -> None: ...
    def get_analog_io(self, signal: str, network: str = "", unit: str = "") -> float: ...
    def set_analog_io(self, signal: str, value: int | float, network: str = "", unit: str = "") -> None: ...

    # RAPID variables
    def get_rapid_variable(self, var: str, task: str = "T_ROB1") -> str: ...
    def get_rapid_variable_num(self, var: str, task: str = "T_ROB1") -> float: ...
    def set_rapid_variable(self, var: str, value: str | int | float, task: str = "T_ROB1") -> None: ...
    def set_rapid_variable_num(self, var: str, val: float, task: str = "T_ROB1") -> None: ...

    # Files
    def get_ramdisk_path(self) -> str: ...
    def read_file(self, filename: str) -> bytes: ...
    def read_file_str(self, filename: str) -> str: ...
    def upload_file(self, filename: str, content: str | bytes) -> None: ...
    def delete_file(self, filename: str) -> None: ...

    # Misc
    def read_event_log(self) -> List[EventLogEntryLike]: ...
    def get_mechunits(self) -> List[str]: ...

    # Geometry
    def get_jointtarget(self, mechunit: str = "ROB_1") -> JointTarget: ...
    def get_robtarget(self, mechunit: str = "ROB_1", tool: str = "tool0", wobj: str = "wobj0", coordinate: str = "Base") -> RobTarget: ...
